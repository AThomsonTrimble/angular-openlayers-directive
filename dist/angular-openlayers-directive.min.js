/**!
 * The MIT License
 *
 * Copyright (c) 2013 the angular-leaflet-directive Team, http://tombatossals.github.io/angular-leaflet-directive
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * angular-google-maps
 * https://github.com/tombatossals/angular-leaflet-directive
 *
 * @authors https://github.com/tombatossals/angular-leaflet-directive/graphs/contributors
 */

/*! angular-openlayers-directive 09-09-2014 */
!function(){"use strict";angular.module("openlayers-directive",[]).directive("openlayers",["$log","$q","olHelpers","olMapDefaults","olData",function(a,b,c,d,e){var f=b.defer();return{restrict:"EA",replace:!0,scope:{center:"=center",defaults:"=defaults",tiles:"=tiles"},transclude:!0,template:'<div class="angular-openlayers-map"><div ng-transclude></div></div>',controller:["$scope",function(a){this.getMap=function(){return f.promise},this.getOpenlayersScope=function(){return a}}],link:function(a,b,g){var h=c.isDefined,i=c.getLayerObject,j=c.disableMouseWheelZoom,k=d.setDefaults(a.defaults,g.id);h(g.width)&&(isNaN(g.width)?b.css("width",g.width):b.css("width",g.width+"px")),h(g.height)&&(isNaN(g.height)?b.css("height",g.height):b.css("height",g.height+"px"));var l=new ol.Map({target:b[0]});if(!h(g.layers)){var m=i(k.tileLayer);l.addLayer(m)}h(k.controls.zoom.mouseWheelEnabled)&&k.controls.zoom.mouseWheelEnabled===!1&&j(l),h(g.center)||l.setView(new ol.View({center:[k.center.coord.lon,k.center.coord.lat],zoom:k.center.zoom})),e.setMap(l,g.id),f.resolve(l)}}}]),angular.module("openlayers-directive").directive("center",["$log","$location","olMapDefaults","olHelpers",function(a,b,c,d){return{restrict:"A",scope:!1,replace:!1,require:"openlayers",link:function(e,f,g,h){var i=d.safeApply,j=d.isValidCenter,k=d.isDefined,l=d.isSameCenterOnMap,m=d.equals,n=h.getOpenlayersScope();h.getMap().then(function(d){var e=c.getDefaults(g.id),f=n.center;if(-1!==g.center.search("-"))return a.error('[AngularJS - Openlayers] The "center" variable can\'t use a "-" on his key name: "'+g.center+'".'),void d.setView(new ol.View({center:ol.proj.transform([e.center.coord.lon,e.center.coord.lat],"EPSG:4326","EPSG:3857")}));f.autoDiscover&&(f=angular.copy(e.center)),j(f)||(a.warn("[AngularJS - Openlayers] invalid 'center'"),f=angular.copy(e.center));var h=new ol.View({center:ol.proj.transform([f.coord.lon,f.coord.lat],"EPSG:4326","EPSG:3857")});d.setView(h);var o;if(f.centerUrlHash===!0){var p=function(){var a,c=b.search();if(k(c.c)){var d=c.c.split(":");3===d.length&&(a={coord:{lat:parseFloat(d[0]),lon:parseFloat(d[1])},zoom:parseInt(d[2],10)})}return a};o=p(),n.$on("$locationChangeSuccess",function(a){var b=a.currentScope,c=p();k(c)&&!l(c,d)&&(b.center={coord:{lat:c.coord.lat,lon:c.coord.lon},zoom:c.zoom})})}n.$watch("center",function(b){if(b.autoDiscover&&(b=angular.copy(e.center)),j(b)||(a.warn("[AngularJS - Openlayers] invalid 'center'"),b=e.center),h.getCenter()){var c=ol.proj.transform(h.getCenter(),"EPSG:3857","EPSG:4326");if(!m({lat:c[1],lon:c[1]},b.coord)){var d=ol.proj.transform([b.coord.lon,b.coord.lat],"EPSG:4326","EPSG:3857");h.setCenter(d)}}h.getZoom()!==b.zoom&&h.setZoom(b.zoom)},!0),h.on("change:resolution",function(){i(n,function(a){a.center&&a.center.zoom!==h.getZoom()&&(a.center.zoom=h.getZoom())})}),h.on("change:center",function(){i(n,function(a){var b=d.getView().getCenter(),c=ol.proj.transform(b,"EPSG:3857","EPSG:4326");a.center&&(a.center.coord={lat:c[1],lon:c[0]})})})})}}}]),angular.module("openlayers-directive").directive("tiles",["$log","olData","olMapDefaults","olHelpers",function(a,b,c,d){return{restrict:"A",scope:!1,replace:!1,require:"openlayers",link:function(e,f,g,h){var i=d.isDefined,j=h.getOpenlayersScope(),k=d.getLayerObject;h.getMap().then(function(d){var e=c.getDefaults(g.id),f=[];j.$watch("tiles",function(c){i(c)&&i(c.type)||(a.warn("[AngularJS - OpenLayers] The 'tiles' definition doesn't have the 'type' property."),c=e.tileLayer),i(f)&&1===f.length&&(d.removeLayer(f[0]),f.pop());var h=k(c);d.addLayer(h),f.push(h),b.setTiles(f,g.id)},!0)})}}}]),angular.module("openlayers-directive").service("olData",["$log","$q","olHelpers",function(a,b,c){var d=c.obtainEffectiveMapId,e={},f={},g=function(a,b){var c=d(a,b);a[c].resolvedDefer=!0},h=function(a,c){var e,f=d(a,c);return angular.isDefined(a[f])&&a[f].resolvedDefer!==!0?e=a[f].defer:(e=b.defer(),a[f]={defer:e,resolvedDefer:!1}),e},i=function(a,b){var c,e=d(a,b);return c=angular.isDefined(a[e])&&a[e].resolvedDefer!==!1?a[e].defer:h(a,b)};this.setMap=function(a,b){var c=h(e,b);c.resolve(a),g(e,b)},this.getMap=function(a){var b=i(e,a);return b.promise},this.setTiles=function(a,b){var c=h(f,b);c.resolve(a),g(f,b)},this.getTiles=function(a){var b=i(f,a);return b.promise}}]),angular.module("openlayers-directive").factory("olHelpers",["$q","$log",function(a,b){var c=function(a){return angular.isDefined(a)};return{isDefined:c,isNumber:function(a){return angular.isNumber(a)},isDefinedAndNotNull:function(a){return angular.isDefined(a)&&null!==a},isString:function(a){return angular.isString(a)},isArray:function(a){return angular.isArray(a)},isObject:function(a){return angular.isObject(a)},equals:function(a,b){return angular.equals(a,b)},isValidCenter:function(a){return angular.isDefined(a)&&(angular.isDefined(a.coord)&&angular.isNumber(a.coord.lat)&&angular.isNumber(a.coord.lon)||"boolean"==typeof a.autodiscover||angular.isArray(a.bounds)&&4===a.bounds.length&&angular.isNumber(a.bounds[0])&&angular.isNumber(a.bounds[1])&&angular.isNumber(a.bounds[1])&&angular.isNumber(a.bounds[2]))},safeApply:function(a,b){var c=a.$root.$$phase;"$apply"===c||"$digest"===c?a.$eval(b):a.$apply(b)},isSameCenterOnMap:function(a,b){var c=b.getView().getCenter(),d=b.getView().getZoom();return c[1].toFixed(4)===a.coord.lat.toFixed(4)&&c[1].toFixed(4)===a.coord.lng.toFixed(4)&&d===a.zoom?!0:!1},obtainEffectiveMapId:function(a,c){var d,e;if(angular.isDefined(c))d=c;else if(1===Object.keys(a).length)for(e in a)a.hasOwnProperty(e)&&(d=e);else 0===Object.keys(a).length?d="main":b.error("[AngularJS - Openlayers] - You have more than 1 map on the DOM, you must provide the map ID to the olData.getXXX call");return d},generateUniqueUID:function(){function a(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}return a()+a()+"-"+a()+"-"+a()+"-"+a()+"-"+a()+a()+a()},disableMouseWheelZoom:function(a){var b=a.getInteractions();b.forEach(function(b){b instanceof ol.interaction.MouseWheelZoom&&a.removeInteraction(b)})},getLayerObject:function(a){var b,c;switch(a.type){case"OSM":c=a.attribution?new ol.source.OSM({attributions:[new ol.Attribution({html:a.attribution}),ol.source.OSM.DATA_ATTRIBUTION]}):new ol.source.OSM,b=new ol.layer.Tile({source:c}),a.url&&c.setUrl(a.url);break;case"TileJSON":c=new ol.source.TileJSON({url:a.url,crossOrigin:"anonymous"}),b=new ol.layer.Tile({source:c})}return b}}}]),angular.module("openlayers-directive").factory("olMapDefaults",["$q","olHelpers",function(a,b){function c(){return{tileLayer:{type:"OSM"},center:{coord:{lat:0,lon:0},zoom:1,autoDiscover:!1,bounds:[],centerUrlHash:!1},controls:{zoom:{position:"topright",mouseWheelEnabled:!0}}}}var d=b.isDefined,e=b.obtainEffectiveMapId,f={};return{getDefaults:function(a){var b=e(f,a);return f[b]},setDefaults:function(a,b){var g=c();d(a)&&(g.tileLayer=d(a.tileLayer)?a.tileLayer:g.tileLayer,d(a.controls)&&d(a.controls.zoom)&&(g.controls.zoom.mouseWheelEnabled=d(a.controls.zoom.mouseWheelEnabled)?a.controls.zoom.mouseWheelEnabled:g.controls.zoom.mouseWheelEnabled));var h=e(f,b);return f[h]=g,g}}}])}();